
plugins {
    id "io.franzbecker.gradle-lombok" version "3.2.0"
    id "java"
    id "maven-publish"
    id "signing"
    id "com.github.ben-manes.versions" version "0.27.0"
}

apply plugin: "jacoco"

group = "de.alpharogroup"
version = "6.5-SNAPSHOT"
description = "xml-extensions"
sourceCompatibility = "1.8"

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
}

ext {
    lombokVersion = "1.18.10"
    xmlbeansVersion = "3.1.0"
    jettisonVersion = "1.4.0"
    xstreamVersion = "1.4.11.1"
    jacksonDatabindVersion = "2.10.1"
    xercesImplVersion = "2.12.0"
    jsonVersion = "20190722"
    fileWorkerVersion = "5.4"
    jobjCoreVersion = "3.3"
    jobjCloneVersion = "3.2"
    mysticCryptVersion = "7.2"
    testObjectsVersion = "5.2"
    velocityExtensionsVersion = "1.3.1"
    meanbeanFactoriesVersion = "1.1.1"
    jobjContractVerifierVersion = "3.2"
    velocityVersion = "1.7"
    meanbeanVersion = "2.0.3"
    testngVersion = "7.1.0"
    junitVersion = "4.13-rc-2"
    mockitoCoreVersion = "3.2.0"
}

dependencies {
    compile "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compile "org.apache.xmlbeans:xmlbeans:${xmlbeansVersion}"
    compile "org.codehaus.jettison:jettison:${jettisonVersion}"
    compile "com.thoughtworks.xstream:xstream:${xstreamVersion}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}"
    compile "xerces:xercesImpl:${xercesImplVersion}"
    compile "org.json:json:${jsonVersion}"
    compile "de.alpharogroup:file-worker:${fileWorkerVersion}"
    compile "de.alpharogroup:jobj-core:${jobjCoreVersion}"
    compile "de.alpharogroup:jobj-clone:${jobjCloneVersion}"
    testCompile "de.alpharogroup:mystic-crypt:${mysticCryptVersion}"
    testCompile "de.alpharogroup:test-objects:${testObjectsVersion}"
    testCompile "de.alpharogroup:velocity-extensions:${velocityExtensionsVersion}"
    testCompile "de.alpharogroup:meanbean-factories:${meanbeanFactoriesVersion}"
    testCompile "de.alpharogroup:jobj-contract-verifier:${jobjContractVerifierVersion}"
    testCompile "com.fasterxml.jackson.datatype:jackson-datatype-json-org:${jacksonDatabindVersion}"
    testCompile "org.apache.velocity:velocity:${velocityVersion}"
    testCompile "org.meanbean:meanbean:${meanbeanVersion}"
    testCompile "org.testng:testng:${testngVersion}"
    testCompile "junit:junit:${junitVersion}"
    testCompile "org.mockito:mockito-core:${mockitoCoreVersion}"
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from(sourceSets.main.allJava)
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier.set("javadoc")
    javadoc.properties.failOnError = true
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "${rootProject.name}"
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = "${rootProject.name}"
                description = "Useful extensions and utilities for handle xml or transform dtd to xsd and xslt"
                url = "https://github.com/lightblueseas/"+"${rootProject.name}"
                organization {
                    name = "Alpha Ro Group UG (haftungsbeschr√§ngt)"
                    url = "http://www.alpharogroup.de/"
                }
                issueManagement {
                    system = "GitHub"
                    url = "https://github.com/lightblueseas/"+"${rootProject.name}"+"/issues"
                }
                licenses {
                    license {
                        name = "MIT License"
                        url = "http://www.opensource.org/licenses/mit-license.php"
                        distribution = "repo"
                    }
                }
                developers {
                    developer {
                        id = "astrapi69"
                        name = "Asterios Raptis"
                    }
                }
                scm {
                    connection = "scm:git:git:@github.com:lightblueseas/"+"${rootProject.name}"+".git"
                    developerConnection = "scm:git:git@github.com:lightblueseas/"+"${rootProject.name}"+".git"
                    url = "git:@github.com:lightblueseas/"+"${rootProject.name}"+".git"
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username System.getenv("ossrhUsername") ?: project.property("ossrhUsername")
                password System.getenv("ossrhPassword") ?: project.property("ossrhPassword")
            }
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

test {
    useTestNG()
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ["de/alpharogroup/xml/sax/handler/WriterHandler.class",
                              "de/alpharogroup/xml/XmlTransformation.class",
                              "de/alpharogroup/xml/json/ObjectToJsonQuietlyExtensions.class",
                              "de/alpharogroup/xml/node/NodeType.class",
                              "de/alpharogroup/xml/sax/handler/BreakParsingException.class"])
        })
    }
}

check.dependsOn jacocoTestReport
