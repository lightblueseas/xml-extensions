buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.ben-manes:gradle-versions-plugin:$gradlePluginVersionsVersion"
        classpath "gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:$licenseGradlePluginVersion"
    }
}

apply plugin: "java"
apply plugin: "java-library"
apply plugin: "maven-publish"
apply plugin: "signing"
apply plugin: "com.github.ben-manes.versions"
apply plugin: "com.github.hierynomus.license"
apply plugin: "jacoco"

group = "$groupPackage"
version = "$projectVersion"
description = "$rootProject.name"
sourceCompatibility = "$projectSourceCompatibility"

repositories {
    mavenLocal()
    mavenCentral()
}

javadoc {
    failOnError = false
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

test {
    useTestNG()
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ["de/alpharogroup/xml/api/Transformable.class",
                              "de/alpharogroup/xml/api/Xmlable.class",
                              "de/alpharogroup/xml/sax/handler/WriterHandler.class",
                              "de/alpharogroup/xml/XmlTransformation.class",
                              "de/alpharogroup/xml/json/ObjectToJsonQuietlyExtensions.class",
                              "de/alpharogroup/xml/node/NodeType.class",
                              "de/alpharogroup/xml/XmlTransformation.class",
                              "de/alpharogroup/xml/sax/handler/BreakParsingException.class"])
        }))
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from(sourceSets.main.allJava)
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier.set("javadoc")
    javadoc.properties.failOnError = true
}

check.dependsOn jacocoTestReport

def releaseVersion = !version.endsWith("SNAPSHOT")

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "$rootProject.name"
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = "$rootProject.name"
                description = "$projectDescription"
                url = "$projectScmProviderUrl" + "$projectHolderUsername" + "$slash" + "$rootProject.name"
                organization {
                    name = "$projectOrganizationName"
                    url = "$projectOrganizationUrl"
                }
                issueManagement {
                    system = "$projectIssueManagementSystem"
                    url = "$projectScmProviderUrl" + "$projectHolderUsername" + "$slash" + "$rootProject.name" + "$issuesPath"
                }
                licenses {
                    license {
                        name = "$projectLicenseName"
                        url = "$projectLicenseUrl"
                        distribution = "$projectLicenseDistribution"
                    }
                }
                developers {
                    developer {
                        id = "$projectHolderUsername"
                        name = "$projectLeaderName"
                    }
                }
                scm {
                    connection = "$projectScmGitUrlPrefix" + "$projectScmProviderDomain" + "$colon" + "$projectHolderUsername" + "$slash" + "$rootProject.name" + "$projectScmGitUrlSuffix"
                    developerConnection = "$projectScmGitUrlPrefix" + "$projectScmProviderDomain" + "$colon" + "$projectHolderUsername" + "$slash" + "$rootProject.name" + "$projectScmGitUrlSuffix"
                    url = "$projectScmGitUrlPrefix" + "$projectScmProviderDomain" + "$colon" + "$projectHolderUsername" + "$slash" + "$rootProject.name" + "$projectScmGitUrlSuffix"
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username System.getenv("$projectRepositoriesUserNameKey") ?: project.property("$projectRepositoriesUserNameKey")
                password System.getenv("$projectRepositoriesPasswordKey") ?: project.property("$projectRepositoriesPasswordKey")
            }
            def releasesRepoUrl = "$projectRepositoriesReleasesRepoUrl"
            def snapshotsRepoUrl = "$projectRepositoriesSnapshotsRepoUrl"
            url = releaseVersion ? releasesRepoUrl : snapshotsRepoUrl
        }
    }
}

signing {
    if (releaseVersion) {
        sign publishing.publications.mavenJava
    }
}

jar {
    manifest {
        attributes(
                "Name": project.name,
                "Manifest-Version": project.version,
                "Implementation-Title": "$groupPackage" + "." + "$rootProject.name",
                "Implementation-Version": project.version,
                "Implementation-Vendor": "$projectLeaderName",
                "Created-By": "Gradle ${gradle.gradleVersion}",
                "Built-By": "$projectLeaderName",
                "Build-Timestamp": new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                "Build-Jdk": "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                "Build-OS": "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}")
    }
}

license {
    ext.year = "$projectInceptionYear"
    ext.owner = "$projectLeaderName"
    header rootProject.file("src/main/resources/LICENSE.txt")
    excludes(["**/README",
              "**/README.md",
              "**/LICENSE",
              "**/NOTICE",
              "**/*.xml",
              "**/*.xsl",
              "**/*.xsd",
              "**/*.dtd",
              "**/*.html",
              "**/*.jsp",
              "**/*.json",
              "**/*.jpa",
              "**/*.sql",
              "**/*.properties",
              "**/*.bat",
              "**/*.gradle",
              "**/*.MF",
              "**/*.txt",
              "**/*.vm",
              "**/*.log",
              "**/*.map",
              "**/*.js.map",
              "**/*.tmpl",
              "**/*.js.tmpl",
              "**/*.editorconfig",
              "src/test/resources/**",
              "src/main/resources/**",
              "out/**",
              "build/**"])
}
// workhack for license issue #76
gradle.startParameter.excludedTaskNames += "licenseMain"
gradle.startParameter.excludedTaskNames += "licenseTest"

dependencies {
    implementation("org.apache.xmlbeans:xmlbeans:$xmlbeansVersion")
    implementation("org.codehaus.jettison:jettison:$jettisonVersion")
    implementation("com.thoughtworks.xstream:xstream:$xstreamVersion")
    implementation("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jacksonVersion")
    implementation("xerces:xercesImpl:$xercesImplVersion")
    implementation("org.json:json:$jsonVersion")
    implementation("commons-codec:commons-codec:$commonsCodecVersion")
    implementation("commons-io:commons-io:$commonsIoVersion")
    implementation("io.github.astrapi69:silly-collections:$sillyCollectionsVersion")
    implementation("io.github.astrapi69:silly-beans:$sillyBeansVersion")
    implementation("io.github.astrapi69:file-worker:$fileWorkerVersion")
    implementation("io.github.astrapi69:jobj-core:$jobjCoreVersion")
    implementation("io.github.astrapi69:jobj-clone:$jobjCloneVersion")
    implementation("io.github.astrapi69:crypt-data:$cryptDataVersion")
    implementation("io.github.astrapi69:crypt-api:$cryptApiVersion")
    testImplementation("io.github.astrapi69:mystic-crypt:$mysticCryptVersion")
    testImplementation("io.github.astrapi69:test-objects:$testObjectsVersion")
    testImplementation("io.github.astrapi69:meanbean-factories:$meanbeanFactoriesVersion")
    testImplementation("io.github.astrapi69:jobj-contract-verifier:$jobjContractVerifierVersion")
    testImplementation("io.github.astrapi69:checksum-up:$checksumUpVersion")
    testImplementation("io.github.astrapi69:silly-io:$sillyIoVersion")
    testImplementation("io.github.astrapi69:velocity-extensions:$velocityExtensionsVersion")
    testImplementation("org.apache.velocity:velocity:$velocityVersion")
    testImplementation("com.fasterxml.jackson.datatype:jackson-datatype-guava:$jacksonVersion")
    testImplementation("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion")
    testImplementation("com.fasterxml.jackson.datatype:jackson-datatype-json-org:$jacksonVersion")
    testImplementation("org.meanbean:meanbean:$meanbeanVersion")
    testImplementation("org.testng:testng:$testngVersion")
    testImplementation("org.hamcrest:hamcrest-all:$hamcrestVersion")

}
